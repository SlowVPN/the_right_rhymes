# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2015-12-29 08:38
from __future__ import unicode_literals

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('name', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('slug', models.SlugField(verbose_name='Artist Slug')),
                ('origin', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Origin')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('name', models.CharField(max_length=1000, primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Editor',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=1000, verbose_name='Editor Name')),
                ('slug', models.SlugField(verbose_name='Slug')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('headword', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('slug', models.SlugField(max_length=200)),
                ('publish', models.BooleanField(default=False)),
                ('pub_date', models.DateTimeField(auto_now_add=True, verbose_name='Date Published')),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'ordering': ['headword'],
                'verbose_name_plural': 'Entries',
            },
        ),
        migrations.CreateModel(
            name='Example',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('artist_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Artist Name')),
                ('song_title', models.CharField(max_length=200, verbose_name='Song Title')),
                ('release_date', models.DateField(blank=True, null=True, verbose_name='Release Date')),
                ('release_date_string', models.CharField(blank=True, max_length=10, null=True, verbose_name='Release Date String')),
                ('album', models.CharField(max_length=200, verbose_name='Album')),
                ('lyric_text', models.CharField(max_length=1000, verbose_name='Lyric Text')),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('artist', models.ManyToManyField(related_name='_example_artist_+', to='dictionary.Artist')),
                ('feat_artist', models.ManyToManyField(related_name='_example_feat_artist_+', to='dictionary.Artist')),
            ],
            options={
                'ordering': ['release_date', 'artist_name'],
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=1000, verbose_name='Image Title')),
                ('slug', models.SlugField(verbose_name='Slug')),
                ('image', models.ImageField(upload_to='')),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='NamedEntity',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=1000, null=True)),
                ('pref_label', models.CharField(blank=True, max_length=1000, null=True)),
                ('entity_type', models.CharField(blank=True, max_length=1000, null=True)),
                ('examples', models.ManyToManyField(blank=True, related_name='_namedentity_examples_+', to='dictionary.Example')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Named Entities',
            },
        ),
        migrations.CreateModel(
            name='Sense',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('headword', models.CharField(blank=True, max_length=200, null=True, verbose_name='Headword')),
                ('xml_id', models.CharField(blank=True, max_length=20, null=True, verbose_name='Legacy XML id')),
                ('part_of_speech', models.CharField(max_length=20, verbose_name='Part of Speech')),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('domains', models.ManyToManyField(related_name='_sense_domains_+', to='dictionary.Domain')),
                ('examples', models.ManyToManyField(related_name='_sense_examples_+', to='dictionary.Example')),
                ('parent_entry', models.ManyToManyField(related_name='_sense_parent_entry_+', to='dictionary.Entry')),
            ],
            options={
                'ordering': ['xml_id'],
            },
        ),
        migrations.CreateModel(
            name='SynSet',
            fields=[
                ('name', models.CharField(max_length=1000, primary_key=True, serialize=False)),
                ('senses', models.ManyToManyField(blank=True, related_name='_synset_senses_+', to='dictionary.Sense')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'SynSets',
            },
        ),
        migrations.AddField(
            model_name='sense',
            name='synset',
            field=models.ManyToManyField(related_name='_sense_synset_+', to='dictionary.SynSet'),
        ),
        migrations.AddField(
            model_name='example',
            name='features_entities',
            field=models.ManyToManyField(related_name='_example_features_entities_+', to='dictionary.NamedEntity'),
        ),
        migrations.AddField(
            model_name='example',
            name='illustrates_senses',
            field=models.ManyToManyField(related_name='_example_illustrates_senses_+', to='dictionary.Sense'),
        ),
        migrations.AddField(
            model_name='entry',
            name='image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entry_image', to='dictionary.Image'),
        ),
        migrations.AddField(
            model_name='entry',
            name='senses',
            field=models.ManyToManyField(blank=True, related_name='_entry_senses_+', to='dictionary.Sense'),
        ),
        migrations.AddField(
            model_name='domain',
            name='senses',
            field=models.ManyToManyField(blank=True, related_name='_domain_senses_+', to='dictionary.Sense'),
        ),
        migrations.AddField(
            model_name='artist',
            name='featured_examples',
            field=models.ManyToManyField(related_name='_artist_featured_examples_+', to='dictionary.Example'),
        ),
        migrations.AddField(
            model_name='artist',
            name='image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='depicts', to='dictionary.Image'),
        ),
        migrations.AddField(
            model_name='artist',
            name='primary_examples',
            field=models.ManyToManyField(related_name='_artist_primary_examples_+', to='dictionary.Example'),
        ),
    ]
